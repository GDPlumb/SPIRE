
import json
import os
import pickle
import sys

from Config import get_data_dir
from Misc import id_from_path

sys.path.insert(0, '../Common/')
from COCOWrapper import COCOWrapper
from FormatData import mask_images_parallel

if __name__ == '__main__':
    
    print('Masking')

    label1 = sys.argv[1]
    label2 = sys.argv[2]
    spurious = sys.argv[3]
    tuple_dir = '{}/{}-{}/{}'.format(get_data_dir(), label1, label2, spurious)
    
    for mode in ['val', 'train']:
        mode_dir = '{}/{}'.format(tuple_dir, mode)

        # Get the image splits
        coco = COCOWrapper(mode = mode)
        coco_dir = coco.get_base_dir()
        
        with open('{}/splits.json'.format(mode_dir), 'r') as f:
            splits = json.load(f)
                
        imgs = coco.get_images_with_cats(None)
        id2img = {}
        for img in imgs:
            id2img[id_from_path(img['file_name'])] = img
    
        # Create the datastructures to store the images
        # images:  maps from Image ID to each available version of that Image (location, label)
        names = ['1s', '1ns', '0s', '0ns']
        images = {}
        for name in names:
            if name in ['1s', '1ns']:
                label = 1
            else:
                label = 0
              
            for id in splits[name]:
                f = '{}/{}'.format(coco_dir, id2img[id]['file_name'])
                images[id] = {'orig': [f, label]}

        # Create the masked images
        configs = [('1s', '1s-s', 1), ('0s', '0s-s', 0)]
        chosen_id = coco.get_class_id(spurious)
        class_type = 'spurious'
        for config in configs:
        
            name = config[0]
            ids = splits[name]
            imgs = [id2img[id] for id in ids]

            config_dir = '{}/{}'.format(mode_dir, config[1])
            os.system('mkdir {}'.format(config_dir))
            
            label = config[2]

            for mask_mode in ['box', 'pixel']:

                mask_dir = '{}/{}'.format(config_dir, mask_mode)
                os.system('mkdir {}'.format(mask_dir))

                mask_images_parallel(imgs, coco.coco, coco_dir, mask_dir, chosen_id = chosen_id, mode = mask_mode, use_png = True, unmask = False)
                
                for id in ids:
                    images[id]['{}-{}'.format(class_type, mask_mode)] = ['{}/{}png'.format(mask_dir, id2img[id]['file_name'][:-3]), label]

            os.system('rm {}/*.p'.format(config_dir)) # Remove the autogenerated info file

        # Save
        with open('{}/images.p'.format(mode_dir), 'wb') as f:
            pickle.dump(images, f)
