
import os
import pickle
import sys

from Config import get_data_dir
from Misc import id_from_path

sys.path.insert(0, '../COCO/')
from COCOWrapper import COCOWrapper
from FormatData import mask_images_parallel

if __name__== '__main__':
    
    print('Inverting')
    
    main = sys.argv[1]
    spurious = sys.argv[2]
    
    pair_dir = '{}/{}-{}'.format(get_data_dir(), main, spurious)
    for mode in ['val', 'train']:
        mode_dir = '{}/{}'.format(pair_dir, mode)
        
        with open('{}/images.p'.format(mode_dir), 'rb') as f:
            images = pickle.load(f)

        with open('{}/splits.p'.format(mode_dir), 'rb') as f:
            splits = pickle.load(f)
        
        coco = COCOWrapper(mode = mode)
        coco_dir = coco.get_base_dir()
        
        imgs = coco.get_images_with_cats(None)
        id2img = {}
        for img in imgs:
            id2img[id_from_path(img['file_name'])] = img
        
        # Create the masked images
        configs = [('both', 'both', 'both-both-inverse', 1), \
                ('both', main, 'both-main-inverse', 1), \
                ('both', spurious, 'both-spurious-inverse', 0), \
                ('just_main', main, 'just_main-main-inverse', 1), \
                ('just_spurious', spurious, 'just_spurious-spurious-inverse', 0)]
                
        for config in configs:
        
            name = config[0]
            ids = splits[name]
            imgs = [id2img[id] for id in ids]

            chosen_class = config[1]
            if chosen_class == 'both':
                chosen_id = []
                chosen_id.append(coco.get_class_id(main))
                chosen_id.append(coco.get_class_id(spurious))
            else:
                chosen_id = coco.get_class_id(chosen_class)
            
            if chosen_class == main:
                class_type = 'main'
            elif chosen_class == spurious:
                class_type = 'spurious'
            elif chosen_class == 'both':
                class_type = 'both'

            config_dir = '{}/{}'.format(mode_dir, config[2])
            os.system('rm -rf {}'.format(config_dir))
            os.system('mkdir {}'.format(config_dir))
            
            label = config[3]

            mask_mode = 'pixel'

            mask_dir = '{}/{}'.format(config_dir, mask_mode)
            os.system('mkdir {}'.format(mask_dir))

            mask_images_parallel(imgs, coco.coco, coco_dir, mask_dir, mode = mask_mode, invert = True, use_png = True, chosen_id = chosen_id)
                
            for id in ids:
                images[id]['{}-inverse'.format(class_type)] = ['{}/{}png'.format(mask_dir, id2img[id]['file_name'][:-3]), label]

            os.system('rm {}/*.p'.format(config_dir)) # Remove the autogenerated info file
            
            with open('{}/images.p'.format(mode_dir), 'wb') as f:
                pickle.dump(images, f)
